---
description: 
globs: 
alwaysApply: true
---
**1. Общие Принципы**

*   **Читаемость Превыше Всего (PEP 8):**
    *   Код форматируется с помощью `Black`.
    *   Импорты сортируются с помощью `isort`.
    *   Стиль и потенциальные ошибки проверяются `Flake8`.
    *   Используются осмысленные имена (`snake_case` для функций/переменных, `CamelCase` для классов).
    *   Функции и методы должны быть короткими и выполнять одну задачу (SRP).
    *   Минимизируется вложенность, используется "ранний выход".
*   **Простота и Ясность (KISS):**
    *   Предпочитается простой и понятный код.
    *   Оптимизация производительности – только при наличии реальной проблемы.
    *   Явное лучше неявного.
*   **Не Повторяй Себя (DRY - Don't Repeat Yourself):**
    *   Избегай копипаста. Выноси повторяющуюся логику в функции или классы.
    *   Используй шаблоны Jinja2 и наследование для UI.

**2. Структура Проекта и Кода**

*   **Модульность (Flask Blueprints):** Используется для разделения приложения на логические части (`main`, `auth`, `reports`, `api_clients`, `utils`).
*   **Разделение Ответственности:**
    *   **Роуты (`routes.py`):** Тонкие контроллеры. Принимают запрос, вызывают сервисы/утилиты, готовят контекст, рендерят шаблон. **Без сложной логики и прямых вызовов внешних API.**
    *   **Утилиты/Сервисы (`utils.py`):** Содержат бизнес-логику, не привязанную к конкретному роуту или модели.
    *   **Модели (`models.py`):** Описание схемы БД через SQLAlchemy. Минимум логики.
    *   **API-Клиенты (`api_clients/`):** Инкапсуляция взаимодействия с внешними API (`YandexDirectClient`). Обработка специфики API (URL, заголовки, ошибки, ретраи).
    *   **Конфигурация (`config.py`, `.env`):** Внешняя конфигурация приложения. **Никаких секретов в коде.** Все настройки только в этих файлах

**3. Качество Кода и Инструменты**

*   **Контроль Качества (Минимум для MVP):**
    *   Использовать расширения для форматеров (`Black`) и линтеров (`Flake8`) в IDE.
    *   **(Рекомендовано)** Настроить **pre-commit хуки** для автоматической проверки перед коммитом (`black`, `isort`, `flake8`).
*   **Типизация (Type Hints - PEP 484):**
    *   **(Рекомендовано)** Добавлять аннотации типов **хотя бы** для сигнатур публичных функций и методов (особенно в `utils` и `api_clients`). Это улучшает читаемость и помогает статическим анализаторам и AI-ассистентам.
    *   Пример: `def get_valid_token(client_login: str) -> str | None:`
*   **Документирование (Docstrings):**
    *   **(Рекомендовано)** Писать **докстринги** (в тройных кавычках) для всех нетривиальных функций, классов и модулей, объясняя их назначение, аргументы (`Args:`) и возвращаемое значение (`Returns:`). Стиль Google или NumPy.

**4. Работа с Данными (PostgreSQL + SQLAlchemy)**

*   **ORM:** Использовать SQLAlchemy ORM. Избегать сырых SQL без крайней необходимости.
*   **Миграции (Flask-Migrate):** **Все** изменения схемы БД – **только** через генерацию и применение миграций.
*   **Транзакции:** `db.session.commit()` только после успешного завершения логической операции. `db.session.rollback()` при ошибках.
*   **Расчетные Метрики:** Хранить в БД **сырые данные** (Показы, Клики, Расход, Конверсии). Расчетные показатели (CTR, CPC, CR, CPA) **рассчитывать на лету** в Python (в роутах или утилитах) или в шаблонах Jinja2.

**5. Обработка Ошибок и Логирование**

*   **Обработка Исключений:** Оборачивать потенциально проблемные операции (внешние API, работа с БД, файлами) в `try...except`. Ловить **конкретные** ожидаемые исключения.
*   **Логирование (Минимум для MVP):**
    *   Использовать стандартный модуль `logging`. Настроить базовую конфигурацию в `app/__init__.py` (уровень INFO, вывод в stdout/файл).
    *   Заменить все `print()` для отладки на вызовы `logger.debug()`, `logger.info()`, `logger.warning()`, `logger.error()`.
    *   Логировать важные события и особенно ошибки, включая traceback при исключениях (`logger.exception("Сообщение об ошибке")`).
*   **Ретраи для API (`tenacity`):** Обязательно использовать для вызовов к внешним API (особенно Директ) для повышения надежности.

**6. Безопасность (Минимум для MVP)**

*   **Секреты:** Хранить в `.env`, не коммитить в Git. Использовать надежный `SECRET_KEY`.
*   **Шифрование Токенов:** OAuth-токены в БД **должны быть зашифрованы** (использовать `cryptography`).
*   **Flask-Login:** Использовать `@login_required` для защиты роутов.

**7. Контроль Версий (Git)**

*   **Коммиты:** Атомарные, логически завершенные, с осмысленными сообщениями.
*   **Ветвление:** Использовать ветки для фич и багфиксов (`feature/...`, `fix/...`).

**8. Специфика Проекта**

*   **Универсальная Функция для API Reports:** Учитывая частое использование API Reports для разных срезов, создать максимально универсальную и параметризованную функцию (или метод в `YandexDirectClient`) для формирования `ReportDefinition`, запроса отчета, ожидания и парсинга. Параметризовать: `ReportType`, `FieldNames`, `Filter`, `DateRangeType`/`DateFrom`/`DateTo`, `Goals` и т.д.


После внесения изменений в какие либо функции, их добавление или удаление, обратись к файлу PROJECT_README.md проанализируй структуру проекта. Найди в каких файлах могут быть обращения к этой функции. Прочитай эти файлы и проанализируй на предмет потецниальных ошибок вызванных внесенными изменениями. Исправь все ошибки.


